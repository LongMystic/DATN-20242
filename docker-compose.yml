version: '1'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.6.1
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./services/airflow/dags:/opt/airflow/dags
    - ./services/airflow/logs:/opt/airflow/logs
    - ./services/airflow/config:/opt/airflow/config
    - ./services/airflow/plugins:/opt/airflow/plugins
  user: "0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  hive-metastore-mysql:
    image: mysql:5.7
    container_name: hive-metastore-mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: metastore
      MYSQL_USER: hive
      MYSQL_PASSWORD: hive
    ports:
      - "3309:3306"
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "--password=root"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lakehouse-network

  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    environment:
      - HIVE_CONF_DIR=/opt/hive/conf
      - HIVE_AUX_JARS_PATH=/opt/hive/lib
      - HADOOP_HOME=/opt/hadoop
      - HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop
      - HIVE_METASTORE_PORT=9083
      - HIVE_METASTORE_HOST=hive-metastore
      - HIVE_SERVER2_THRIFT_BIND_HOST=hive-metastore
      - HIVE_SERVER2_THRIFT_PORT=10000
      - HIVE_SERVER2_TRANSPORT_MODE=binary
      - DB_TYPE=mysql
    volumes:
      - ./services/hive/conf/hive-site.xml:/opt/hive/conf/hive-site.xml
      - ./services/hive/jars/mysql-connector-java-8.0.21.jar:/opt/hive/lib/mysql-connector-java-8.0.21.jar
    entrypoint: ["/bin/bash", "-c", "
      if ! mysql -h hive-metastore-mysql -u root -proot -e 'use metastore; SELECT * FROM CTLGS LIMIT 1;' &> /dev/null; then
        echo 'Initializing schema...';
        /opt/hive/bin/schematool -dbType mysql -initSchema;
      else
        echo 'Schema already exists. Skipping initialization.';
      fi;
      /opt/hive/bin/hive --service metastore
    "]
    ports:
      - "9084:9083"
    networks:
      - lakehouse-network
    depends_on:
        hive-metastore-mysql:
          condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9083"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    user: root
    environment:
      - CLUSTER_NAME=test
    ports:
      - "9870:9870" # Web UI
      - "8020:8020" # File system
    networks:
      - lakehouse-network
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/mapred-site.xml:/etc/hadoop/mapred-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
#    command: ["sh", "-c", "hdfs namenode -format -force && /entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    networks:
      - lakehouse-network
    volumes:
      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
      - ./services/hadoop/conf/mapred-site.xml:/etc/hadoop/mapred-site.xml
      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
    depends_on:
      - namenode
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9864" ]
      interval: 30s
      timeout: 10s
      retries: 3
    
#  resourcemanager:
#    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
#    container_name: resourcemanager
#    environment:
#      - SERVICE_PRECONDITION=namenode:9870
#    ports:
#      - "8088:8088"
#    networks:
#      - lakehouse-network
#    volumes:
#      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
#      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
#      - ./services/hadoop/conf/mapred-site.xml:/etc/hadoop/mapred-site.xml
#      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
#    depends_on:
#      - namenode
#
#  nodemanager:
#    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
#    container_name: nodemanager
#    environment:
#      - SERVICE_PRECONDITION=resourcemanager:8088
#    networks:
#      - lakehouse-network
#    volumes:
#      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
#      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
#      - ./services/hadoop/conf/mapred-site.xml:/etc/hadoop/mapred-site.xml
#      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
#    depends_on:
#      - resourcemanager
#
#  historyserver:
#    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
#    container_name: historyserver
#    environment:
#      - SERVICE_PRECONDITION=resourcemanager:8088
#    ports:
#      - "8188:8188"
#    networks:
#      - lakehouse-network
#    volumes:
#      - ./services/hadoop/conf/core-site.xml:/etc/hadoop/core-site.xml
#      - ./services/hadoop/conf/hdfs-site.xml:/etc/hadoop/hdfs-site.xml
#      - ./services/hadoop/conf/mapred-site.xml:/etc/hadoop/mapred-site.xml
#      - ./services/hadoop/conf/yarn-site.xml:/etc/hadoop/yarn-site.xml
#    depends_on:
#      - resourcemanager

  # Spark Master
  spark-master:
    image: bitnami/spark:3.3.1
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_CONF_DIR=/opt/bitnami/spark/conf
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_DAEMON_JAVA_OPTS=-Dspark.ui.prometheus.enabled=true -Dspark.metrics.conf=/opt/bitnami/spark/conf/metrics.properties
    volumes:
      - ./services/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./services/spark/conf/metrics.properties:/opt/bitnami/spark/conf/metrics.properties
      - ./services/hive/conf/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
      - ./services/hadoop/conf/core-site.xml:/opt/bitnami/spark/conf/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/opt/bitnami/spark/conf/hdfs-site.xml
      - ./services/spark/jars/mysql-connector-java-8.0.21.jar:/opt/bitnami/spark/jars/mysql-connector-java-8.0.21.jar
      - ./services/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar:/opt/bitnami/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar
    ports:
      - "7077:7077" # spark master port
      - "8080:8080" # web UI
      - "8090:8090"  # Prometheus metrics
    networks:
      - lakehouse-network
#    depends_on:
#      - hive-metastore
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spark Thrift Server (separate from master)
  spark-thriftserver:
    image: bitnami/spark:3.3.1
    container_name: spark-thriftserver
    environment:
      - SPARK_MODE=master  # Acting as worker, but will run thrift server
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_CONF_DIR=/opt/bitnami/spark/conf
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_DAEMON_JAVA_OPTS=-Dspark.ui.prometheus.enabled=true -Dspark.metrics.conf=/opt/bitnami/spark/conf/metrics.properties
    volumes:
      - ./services/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./services/spark/conf/metrics.properties:/opt/bitnami/spark/conf/metrics.properties
      - ./services/hive/conf/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
      - ./services/hadoop/conf/core-site.xml:/opt/bitnami/spark/conf/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/opt/bitnami/spark/conf/hdfs-site.xml
      - ./services/spark/jars/mysql-connector-java-8.0.21.jar:/opt/bitnami/spark/jars/mysql-connector-java-8.0.21.jar
      - ./services/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar:/opt/bitnami/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar
    ports:
      - "10000:10000" # thrift server port
      - "4040:4040" # spark UI
      - "8092:8092" # Prometheus metrics
    networks:
      - lakehouse-network
    depends_on:
      - spark-master
#      - hive-metastore
    command: ["/opt/bitnami/spark/bin/spark-submit", "--class", "org.apache.spark.sql.hive.thriftserver.HiveThriftServer2", "--master", "spark://spark-master:7077", "--name", "Thrift JDBC/ODBC Server" ]
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "10000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.3.1
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_CONF_DIR=/opt/bitnami/spark/conf
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_DAEMON_JAVA_OPTS=-Dspark.ui.prometheus.enabled=true -Dspark.metrics.conf=/opt/bitnami/spark/conf/metrics.properties
    ports:
      - "8091:8091"
      - "8081:8081"
    volumes:
      - ./services/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./services/spark/conf/metrics.properties:/opt/bitnami/spark/conf/metrics.properties
      - ./services/hive/conf/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
      - ./services/hadoop/conf/core-site.xml:/opt/bitnami/spark/conf/core-site.xml
      - ./services/hadoop/conf/hdfs-site.xml:/opt/bitnami/spark/conf/hdfs-site.xml
      - ./services/spark/jars/mysql-connector-java-8.0.21.jar:/opt/bitnami/spark/jars/mysql-connector-java-8.0.21.jar
      - ./services/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar:/opt/bitnami/spark/jars/iceberg-spark-runtime-3.3_2.12-1.3.0.jar
    depends_on:
      - spark-master
    networks:
      - lakehouse-network

  # Superset
  superset:
    image: superset_custom:latest
#    build:
#      ./services/superset/
    container_name: superset
    hostname: superset
#    depends_on:
#      - spark-thriftserver
    ports:
      - "8089:8088"
    volumes:
      - ./services/superset/conf/superset_config.py:/app/pythonpath/superset_config.py
#    environment:
#      - SUPERSET_CONFIG_PATH=/app/pythonpath/superset_config.py
    networks:
      - lakehouse-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8088/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    ports:
      - "3000:3000"
#    volumes:
#      - ./services/grafana/provisioning:/etc/grafana/provisioning
#      - ./services/grafana/dashboards:/etc/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - lakehouse-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./services/prometheus/conf/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"  # Prometheus UI
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - lakehouse-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9090" ]
      interval: 30s
      timeout: 10s
      retries: 3



  # this is for airflow cluster
  postgres:
    image: postgres:13
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./services/postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 10s
      retries: 5
      start_period: 5s
    #    restart: always
    networks:
      - lakehouse-network


  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    #    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - lakehouse-network

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    #    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - lakehouse-network

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!! Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!! Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!! Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!! You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ./services/airflow:/sources
    networks:
      - lakehouse-network

networks:
  lakehouse-network:
    driver: bridge